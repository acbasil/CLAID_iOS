// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the gRPC Swift generator plugin for the protocol buffer compiler.
// Source: claidservice.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/grpc/grpc-swift

import GRPCCore
import GRPCProtobuf
import SwiftProtobuf

// MARK: - claidservice.ClaidService

/// Namespace containing generated types for the "claidservice.ClaidService" service.
public enum Claidservice_ClaidService {
    /// Service descriptor for the "claidservice.ClaidService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "claidservice.ClaidService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "SendReceivePackages" metadata.
        public enum SendReceivePackages {
            /// Request type for "SendReceivePackages".
            public typealias Input = Claidservice_DataPackage
            /// Response type for "SendReceivePackages".
            public typealias Output = Claidservice_DataPackage
            /// Descriptor for "SendReceivePackages".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "claidservice.ClaidService"),
                method: "SendReceivePackages"
            )
        }
        /// Namespace for "GetModuleList" metadata.
        public enum GetModuleList {
            /// Request type for "GetModuleList".
            public typealias Input = Claidservice_ModuleListRequest
            /// Response type for "GetModuleList".
            public typealias Output = Claidservice_ModuleListResponse
            /// Descriptor for "GetModuleList".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "claidservice.ClaidService"),
                method: "GetModuleList"
            )
        }
        /// Namespace for "InitRuntime" metadata.
        public enum InitRuntime {
            /// Request type for "InitRuntime".
            public typealias Input = Claidservice_InitRuntimeRequest
            /// Response type for "InitRuntime".
            public typealias Output = SwiftProtobuf.Google_Protobuf_Empty
            /// Descriptor for "InitRuntime".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "claidservice.ClaidService"),
                method: "InitRuntime"
            )
        }
        /// Descriptors for all methods in the "claidservice.ClaidService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            SendReceivePackages.descriptor,
            GetModuleList.descriptor,
            InitRuntime.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "claidservice.ClaidService" service.
    public static let claidservice_ClaidService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "claidservice.ClaidService")
}

// MARK: claidservice.ClaidService (server)

extension Claidservice_ClaidService {
    /// Streaming variant of the service protocol for the "claidservice.ClaidService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for modules to talk to the CLAID middleware.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "SendReceivePackages" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Continuous stream of DataPackage's between client and server.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Claidservice_DataPackage` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Claidservice_DataPackage` messages.
        func sendReceivePackages(
            request: GRPCCore.StreamingServerRequest<Claidservice_DataPackage>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Claidservice_DataPackage>

        /// Handle the "GetModuleList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the modules to set up during initialization.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Claidservice_ModuleListRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Claidservice_ModuleListResponse` messages.
        func getModuleList(
            request: GRPCCore.StreamingServerRequest<Claidservice_ModuleListRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Claidservice_ModuleListResponse>

        /// Handle the "InitRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Init Modules
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Claidservice_InitRuntimeRequest` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `SwiftProtobuf.Google_Protobuf_Empty` messages.
        func initRuntime(
            request: GRPCCore.StreamingServerRequest<Claidservice_InitRuntimeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty>
    }

    /// Service protocol for the "claidservice.ClaidService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for modules to talk to the CLAID middleware.
    public protocol ServiceProtocol: Claidservice_ClaidService.StreamingServiceProtocol {
        /// Handle the "SendReceivePackages" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Continuous stream of DataPackage's between client and server.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Claidservice_DataPackage` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Claidservice_DataPackage` messages.
        func sendReceivePackages(
            request: GRPCCore.StreamingServerRequest<Claidservice_DataPackage>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Claidservice_DataPackage>

        /// Handle the "GetModuleList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the modules to set up during initialization.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Claidservice_ModuleListRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `Claidservice_ModuleListResponse` message.
        func getModuleList(
            request: GRPCCore.ServerRequest<Claidservice_ModuleListRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<Claidservice_ModuleListResponse>

        /// Handle the "InitRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Init Modules
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Claidservice_InitRuntimeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A response containing a single `SwiftProtobuf.Google_Protobuf_Empty` message.
        func initRuntime(
            request: GRPCCore.ServerRequest<Claidservice_InitRuntimeRequest>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>
    }

    /// Simple service protocol for the "claidservice.ClaidService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for modules to talk to the CLAID middleware.
    public protocol SimpleServiceProtocol: Claidservice_ClaidService.ServiceProtocol {
        /// Handle the "SendReceivePackages" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Continuous stream of DataPackage's between client and server.
        ///
        /// - Parameters:
        ///   - request: A stream of `Claidservice_DataPackage` messages.
        ///   - response: A response stream of `Claidservice_DataPackage` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func sendReceivePackages(
            request: GRPCCore.RPCAsyncSequence<Claidservice_DataPackage, any Swift.Error>,
            response: GRPCCore.RPCWriter<Claidservice_DataPackage>,
            context: GRPCCore.ServerContext
        ) async throws

        /// Handle the "GetModuleList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the modules to set up during initialization.
        ///
        /// - Parameters:
        ///   - request: A `Claidservice_ModuleListRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `Claidservice_ModuleListResponse` to respond with.
        func getModuleList(
            request: Claidservice_ModuleListRequest,
            context: GRPCCore.ServerContext
        ) async throws -> Claidservice_ModuleListResponse

        /// Handle the "InitRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Init Modules
        ///
        /// - Parameters:
        ///   - request: A `Claidservice_InitRuntimeRequest` message.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A `SwiftProtobuf.Google_Protobuf_Empty` to respond with.
        func initRuntime(
            request: Claidservice_InitRuntimeRequest,
            context: GRPCCore.ServerContext
        ) async throws -> SwiftProtobuf.Google_Protobuf_Empty
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Claidservice_ClaidService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Claidservice_ClaidService.Method.SendReceivePackages.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Claidservice_DataPackage>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Claidservice_DataPackage>(),
            handler: { request, context in
                try await self.sendReceivePackages(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Claidservice_ClaidService.Method.GetModuleList.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Claidservice_ModuleListRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Claidservice_ModuleListResponse>(),
            handler: { request, context in
                try await self.getModuleList(
                    request: request,
                    context: context
                )
            }
        )
        router.registerHandler(
            forMethod: Claidservice_ClaidService.Method.InitRuntime.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Claidservice_InitRuntimeRequest>(),
            serializer: GRPCProtobuf.ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            handler: { request, context in
                try await self.initRuntime(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Claidservice_ClaidService.ServiceProtocol {
    public func getModuleList(
        request: GRPCCore.StreamingServerRequest<Claidservice_ModuleListRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Claidservice_ModuleListResponse> {
        let response = try await self.getModuleList(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }

    public func initRuntime(
        request: GRPCCore.StreamingServerRequest<Claidservice_InitRuntimeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        let response = try await self.initRuntime(
            request: GRPCCore.ServerRequest(stream: request),
            context: context
        )
        return GRPCCore.StreamingServerResponse(single: response)
    }
}

// Default implementation of methods from 'ServiceProtocol'.
extension Claidservice_ClaidService.SimpleServiceProtocol {
    public func sendReceivePackages(
        request: GRPCCore.StreamingServerRequest<Claidservice_DataPackage>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Claidservice_DataPackage> {
        return GRPCCore.StreamingServerResponse<Claidservice_DataPackage>(
            metadata: [:],
            producer: { writer in
                try await self.sendReceivePackages(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }

    public func getModuleList(
        request: GRPCCore.ServerRequest<Claidservice_ModuleListRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<Claidservice_ModuleListResponse> {
        return GRPCCore.ServerResponse<Claidservice_ModuleListResponse>(
            message: try await self.getModuleList(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }

    public func initRuntime(
        request: GRPCCore.ServerRequest<Claidservice_InitRuntimeRequest>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty> {
        return GRPCCore.ServerResponse<SwiftProtobuf.Google_Protobuf_Empty>(
            message: try await self.initRuntime(
                request: request.message,
                context: context
            ),
            metadata: [:]
        )
    }
}

// MARK: claidservice.ClaidService (client)

extension Claidservice_ClaidService {
    /// Generated client protocol for the "claidservice.ClaidService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for modules to talk to the CLAID middleware.
    public protocol ClientProtocol: Sendable {
        /// Call the "SendReceivePackages" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Continuous stream of DataPackage's between client and server.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Claidservice_DataPackage` messages.
        ///   - serializer: A serializer for `Claidservice_DataPackage` messages.
        ///   - deserializer: A deserializer for `Claidservice_DataPackage` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sendReceivePackages<Result>(
            request: GRPCCore.StreamingClientRequest<Claidservice_DataPackage>,
            serializer: some GRPCCore.MessageSerializer<Claidservice_DataPackage>,
            deserializer: some GRPCCore.MessageDeserializer<Claidservice_DataPackage>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Claidservice_DataPackage>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "GetModuleList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the modules to set up during initialization.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Claidservice_ModuleListRequest` message.
        ///   - serializer: A serializer for `Claidservice_ModuleListRequest` messages.
        ///   - deserializer: A deserializer for `Claidservice_ModuleListResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func getModuleList<Result>(
            request: GRPCCore.ClientRequest<Claidservice_ModuleListRequest>,
            serializer: some GRPCCore.MessageSerializer<Claidservice_ModuleListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Claidservice_ModuleListResponse>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Claidservice_ModuleListResponse>) async throws -> Result
        ) async throws -> Result where Result: Sendable

        /// Call the "InitRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Init Modules
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Claidservice_InitRuntimeRequest` message.
        ///   - serializer: A serializer for `Claidservice_InitRuntimeRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func initRuntime<Result>(
            request: GRPCCore.ClientRequest<Claidservice_InitRuntimeRequest>,
            serializer: some GRPCCore.MessageSerializer<Claidservice_InitRuntimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "claidservice.ClaidService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for modules to talk to the CLAID middleware.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "SendReceivePackages" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Continuous stream of DataPackage's between client and server.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Claidservice_DataPackage` messages.
        ///   - serializer: A serializer for `Claidservice_DataPackage` messages.
        ///   - deserializer: A deserializer for `Claidservice_DataPackage` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func sendReceivePackages<Result>(
            request: GRPCCore.StreamingClientRequest<Claidservice_DataPackage>,
            serializer: some GRPCCore.MessageSerializer<Claidservice_DataPackage>,
            deserializer: some GRPCCore.MessageDeserializer<Claidservice_DataPackage>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Claidservice_DataPackage>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Claidservice_ClaidService.Method.SendReceivePackages.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "GetModuleList" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Get the modules to set up during initialization.
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Claidservice_ModuleListRequest` message.
        ///   - serializer: A serializer for `Claidservice_ModuleListRequest` messages.
        ///   - deserializer: A deserializer for `Claidservice_ModuleListResponse` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func getModuleList<Result>(
            request: GRPCCore.ClientRequest<Claidservice_ModuleListRequest>,
            serializer: some GRPCCore.MessageSerializer<Claidservice_ModuleListRequest>,
            deserializer: some GRPCCore.MessageDeserializer<Claidservice_ModuleListResponse>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Claidservice_ModuleListResponse>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Claidservice_ClaidService.Method.GetModuleList.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }

        /// Call the "InitRuntime" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Init Modules
        ///
        /// - Parameters:
        ///   - request: A request containing a single `Claidservice_InitRuntimeRequest` message.
        ///   - serializer: A serializer for `Claidservice_InitRuntimeRequest` messages.
        ///   - deserializer: A deserializer for `SwiftProtobuf.Google_Protobuf_Empty` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func initRuntime<Result>(
            request: GRPCCore.ClientRequest<Claidservice_InitRuntimeRequest>,
            serializer: some GRPCCore.MessageSerializer<Claidservice_InitRuntimeRequest>,
            deserializer: some GRPCCore.MessageDeserializer<SwiftProtobuf.Google_Protobuf_Empty>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
                try response.message
            }
        ) async throws -> Result where Result: Sendable {
            try await self.client.unary(
                request: request,
                descriptor: Claidservice_ClaidService.Method.InitRuntime.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Claidservice_ClaidService.ClientProtocol {
    /// Call the "SendReceivePackages" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Continuous stream of DataPackage's between client and server.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Claidservice_DataPackage` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func sendReceivePackages<Result>(
        request: GRPCCore.StreamingClientRequest<Claidservice_DataPackage>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Claidservice_DataPackage>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.sendReceivePackages(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Claidservice_DataPackage>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Claidservice_DataPackage>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetModuleList" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get the modules to set up during initialization.
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Claidservice_ModuleListRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getModuleList<Result>(
        request: GRPCCore.ClientRequest<Claidservice_ModuleListRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Claidservice_ModuleListResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.getModuleList(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Claidservice_ModuleListRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Claidservice_ModuleListResponse>(),
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "InitRuntime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Init Modules
    ///
    /// - Parameters:
    ///   - request: A request containing a single `Claidservice_InitRuntimeRequest` message.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func initRuntime<Result>(
        request: GRPCCore.ClientRequest<Claidservice_InitRuntimeRequest>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        try await self.initRuntime(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Claidservice_InitRuntimeRequest>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Claidservice_ClaidService.ClientProtocol {
    /// Call the "SendReceivePackages" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Continuous stream of DataPackage's between client and server.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func sendReceivePackages<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Claidservice_DataPackage>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Claidservice_DataPackage>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Claidservice_DataPackage>(
            metadata: metadata,
            producer: producer
        )
        return try await self.sendReceivePackages(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "GetModuleList" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Get the modules to set up during initialization.
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func getModuleList<Result>(
        _ message: Claidservice_ModuleListRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<Claidservice_ModuleListResponse>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Claidservice_ModuleListRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.getModuleList(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }

    /// Call the "InitRuntime" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Init Modules
    ///
    /// - Parameters:
    ///   - message: request message to send.
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func initRuntime<Result>(
        _ message: Claidservice_InitRuntimeRequest,
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.ClientResponse<SwiftProtobuf.Google_Protobuf_Empty>) async throws -> Result = { response in
            try response.message
        }
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.ClientRequest<Claidservice_InitRuntimeRequest>(
            message: message,
            metadata: metadata
        )
        return try await self.initRuntime(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}

// MARK: - claidservice.ClaidRemoteService

/// Namespace containing generated types for the "claidservice.ClaidRemoteService" service.
public enum Claidservice_ClaidRemoteService {
    /// Service descriptor for the "claidservice.ClaidRemoteService" service.
    public static let descriptor = GRPCCore.ServiceDescriptor(fullyQualifiedService: "claidservice.ClaidRemoteService")
    /// Namespace for method metadata.
    public enum Method {
        /// Namespace for "SendReceivePackages" metadata.
        public enum SendReceivePackages {
            /// Request type for "SendReceivePackages".
            public typealias Input = Claidservice_DataPackage
            /// Response type for "SendReceivePackages".
            public typealias Output = Claidservice_DataPackage
            /// Descriptor for "SendReceivePackages".
            public static let descriptor = GRPCCore.MethodDescriptor(
                service: GRPCCore.ServiceDescriptor(fullyQualifiedService: "claidservice.ClaidRemoteService"),
                method: "SendReceivePackages"
            )
        }
        /// Descriptors for all methods in the "claidservice.ClaidRemoteService" service.
        public static let descriptors: [GRPCCore.MethodDescriptor] = [
            SendReceivePackages.descriptor
        ]
    }
}

extension GRPCCore.ServiceDescriptor {
    /// Service descriptor for the "claidservice.ClaidRemoteService" service.
    public static let claidservice_ClaidRemoteService = GRPCCore.ServiceDescriptor(fullyQualifiedService: "claidservice.ClaidRemoteService")
}

// MARK: claidservice.ClaidRemoteService (server)

extension Claidservice_ClaidRemoteService {
    /// Streaming variant of the service protocol for the "claidservice.ClaidRemoteService" service.
    ///
    /// This protocol is the lowest-level of the service protocols generated for this service
    /// giving you the most flexibility over the implementation of your service. This comes at
    /// the cost of more verbose and less strict APIs. Each RPC requires you to implement it in
    /// terms of a request stream and response stream. Where only a single request or response
    /// message is expected, you are responsible for enforcing this invariant is maintained.
    ///
    /// Where possible, prefer using the stricter, less-verbose ``ServiceProtocol``
    /// or ``SimpleServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for two instances of the CLAID middleware to talk to each other over a TCP connection.
    public protocol StreamingServiceProtocol: GRPCCore.RegistrableRPCService {
        /// Handle the "SendReceivePackages" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Continuous stream of DataPackage's between remote client and remote server.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Claidservice_DataPackage` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Claidservice_DataPackage` messages.
        func sendReceivePackages(
            request: GRPCCore.StreamingServerRequest<Claidservice_DataPackage>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Claidservice_DataPackage>
    }

    /// Service protocol for the "claidservice.ClaidRemoteService" service.
    ///
    /// This protocol is higher level than ``StreamingServiceProtocol`` but lower level than
    /// the ``SimpleServiceProtocol``, it provides access to request and response metadata and
    /// trailing response metadata. If you don't need these then consider using
    /// the ``SimpleServiceProtocol``. If you need fine grained control over your RPCs then
    /// use ``StreamingServiceProtocol``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for two instances of the CLAID middleware to talk to each other over a TCP connection.
    public protocol ServiceProtocol: Claidservice_ClaidRemoteService.StreamingServiceProtocol {
        /// Handle the "SendReceivePackages" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Continuous stream of DataPackage's between remote client and remote server.
        ///
        /// - Parameters:
        ///   - request: A streaming request of `Claidservice_DataPackage` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        /// - Returns: A streaming response of `Claidservice_DataPackage` messages.
        func sendReceivePackages(
            request: GRPCCore.StreamingServerRequest<Claidservice_DataPackage>,
            context: GRPCCore.ServerContext
        ) async throws -> GRPCCore.StreamingServerResponse<Claidservice_DataPackage>
    }

    /// Simple service protocol for the "claidservice.ClaidRemoteService" service.
    ///
    /// This is the highest level protocol for the service. The API is the easiest to use but
    /// doesn't provide access to request or response metadata. If you need access to these
    /// then use ``ServiceProtocol`` instead.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for two instances of the CLAID middleware to talk to each other over a TCP connection.
    public protocol SimpleServiceProtocol: Claidservice_ClaidRemoteService.ServiceProtocol {
        /// Handle the "SendReceivePackages" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Continuous stream of DataPackage's between remote client and remote server.
        ///
        /// - Parameters:
        ///   - request: A stream of `Claidservice_DataPackage` messages.
        ///   - response: A response stream of `Claidservice_DataPackage` messages.
        ///   - context: Context providing information about the RPC.
        /// - Throws: Any error which occurred during the processing of the request. Thrown errors
        ///     of type `RPCError` are mapped to appropriate statuses. All other errors are converted
        ///     to an internal error.
        func sendReceivePackages(
            request: GRPCCore.RPCAsyncSequence<Claidservice_DataPackage, any Swift.Error>,
            response: GRPCCore.RPCWriter<Claidservice_DataPackage>,
            context: GRPCCore.ServerContext
        ) async throws
    }
}

// Default implementation of 'registerMethods(with:)'.
extension Claidservice_ClaidRemoteService.StreamingServiceProtocol {
    public func registerMethods<Transport>(with router: inout GRPCCore.RPCRouter<Transport>) where Transport: GRPCCore.ServerTransport {
        router.registerHandler(
            forMethod: Claidservice_ClaidRemoteService.Method.SendReceivePackages.descriptor,
            deserializer: GRPCProtobuf.ProtobufDeserializer<Claidservice_DataPackage>(),
            serializer: GRPCProtobuf.ProtobufSerializer<Claidservice_DataPackage>(),
            handler: { request, context in
                try await self.sendReceivePackages(
                    request: request,
                    context: context
                )
            }
        )
    }
}

// Default implementation of streaming methods from 'StreamingServiceProtocol'.
extension Claidservice_ClaidRemoteService.ServiceProtocol {
}

// Default implementation of methods from 'ServiceProtocol'.
extension Claidservice_ClaidRemoteService.SimpleServiceProtocol {
    public func sendReceivePackages(
        request: GRPCCore.StreamingServerRequest<Claidservice_DataPackage>,
        context: GRPCCore.ServerContext
    ) async throws -> GRPCCore.StreamingServerResponse<Claidservice_DataPackage> {
        return GRPCCore.StreamingServerResponse<Claidservice_DataPackage>(
            metadata: [:],
            producer: { writer in
                try await self.sendReceivePackages(
                    request: request.messages,
                    response: writer,
                    context: context
                )
                return [:]
            }
        )
    }
}

// MARK: claidservice.ClaidRemoteService (client)

extension Claidservice_ClaidRemoteService {
    /// Generated client protocol for the "claidservice.ClaidRemoteService" service.
    ///
    /// You don't need to implement this protocol directly, use the generated
    /// implementation, ``Client``.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for two instances of the CLAID middleware to talk to each other over a TCP connection.
    public protocol ClientProtocol: Sendable {
        /// Call the "SendReceivePackages" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Continuous stream of DataPackage's between remote client and remote server.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Claidservice_DataPackage` messages.
        ///   - serializer: A serializer for `Claidservice_DataPackage` messages.
        ///   - deserializer: A deserializer for `Claidservice_DataPackage` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        func sendReceivePackages<Result>(
            request: GRPCCore.StreamingClientRequest<Claidservice_DataPackage>,
            serializer: some GRPCCore.MessageSerializer<Claidservice_DataPackage>,
            deserializer: some GRPCCore.MessageDeserializer<Claidservice_DataPackage>,
            options: GRPCCore.CallOptions,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Claidservice_DataPackage>) async throws -> Result
        ) async throws -> Result where Result: Sendable
    }

    /// Generated client for the "claidservice.ClaidRemoteService" service.
    ///
    /// The ``Client`` provides an implementation of ``ClientProtocol`` which wraps
    /// a `GRPCCore.GRPCCClient`. The underlying `GRPCClient` provides the long-lived
    /// means of communication with the remote peer.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Service for two instances of the CLAID middleware to talk to each other over a TCP connection.
    public struct Client<Transport>: ClientProtocol where Transport: GRPCCore.ClientTransport {
        private let client: GRPCCore.GRPCClient<Transport>

        /// Creates a new client wrapping the provided `GRPCCore.GRPCClient`.
        ///
        /// - Parameters:
        ///   - client: A `GRPCCore.GRPCClient` providing a communication channel to the service.
        public init(wrapping client: GRPCCore.GRPCClient<Transport>) {
            self.client = client
        }

        /// Call the "SendReceivePackages" method.
        ///
        /// > Source IDL Documentation:
        /// >
        /// > Continuous stream of DataPackage's between remote client and remote server.
        ///
        /// - Parameters:
        ///   - request: A streaming request producing `Claidservice_DataPackage` messages.
        ///   - serializer: A serializer for `Claidservice_DataPackage` messages.
        ///   - deserializer: A deserializer for `Claidservice_DataPackage` messages.
        ///   - options: Options to apply to this RPC.
        ///   - handleResponse: A closure which handles the response, the result of which is
        ///       returned to the caller. Returning from the closure will cancel the RPC if it
        ///       hasn't already finished.
        /// - Returns: The result of `handleResponse`.
        public func sendReceivePackages<Result>(
            request: GRPCCore.StreamingClientRequest<Claidservice_DataPackage>,
            serializer: some GRPCCore.MessageSerializer<Claidservice_DataPackage>,
            deserializer: some GRPCCore.MessageDeserializer<Claidservice_DataPackage>,
            options: GRPCCore.CallOptions = .defaults,
            onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Claidservice_DataPackage>) async throws -> Result
        ) async throws -> Result where Result: Sendable {
            try await self.client.bidirectionalStreaming(
                request: request,
                descriptor: Claidservice_ClaidRemoteService.Method.SendReceivePackages.descriptor,
                serializer: serializer,
                deserializer: deserializer,
                options: options,
                onResponse: handleResponse
            )
        }
    }
}

// Helpers providing default arguments to 'ClientProtocol' methods.
extension Claidservice_ClaidRemoteService.ClientProtocol {
    /// Call the "SendReceivePackages" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Continuous stream of DataPackage's between remote client and remote server.
    ///
    /// - Parameters:
    ///   - request: A streaming request producing `Claidservice_DataPackage` messages.
    ///   - options: Options to apply to this RPC.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func sendReceivePackages<Result>(
        request: GRPCCore.StreamingClientRequest<Claidservice_DataPackage>,
        options: GRPCCore.CallOptions = .defaults,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Claidservice_DataPackage>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        try await self.sendReceivePackages(
            request: request,
            serializer: GRPCProtobuf.ProtobufSerializer<Claidservice_DataPackage>(),
            deserializer: GRPCProtobuf.ProtobufDeserializer<Claidservice_DataPackage>(),
            options: options,
            onResponse: handleResponse
        )
    }
}

// Helpers providing sugared APIs for 'ClientProtocol' methods.
extension Claidservice_ClaidRemoteService.ClientProtocol {
    /// Call the "SendReceivePackages" method.
    ///
    /// > Source IDL Documentation:
    /// >
    /// > Continuous stream of DataPackage's between remote client and remote server.
    ///
    /// - Parameters:
    ///   - metadata: Additional metadata to send, defaults to empty.
    ///   - options: Options to apply to this RPC, defaults to `.defaults`.
    ///   - producer: A closure producing request messages to send to the server. The request
    ///       stream is closed when the closure returns.
    ///   - handleResponse: A closure which handles the response, the result of which is
    ///       returned to the caller. Returning from the closure will cancel the RPC if it
    ///       hasn't already finished.
    /// - Returns: The result of `handleResponse`.
    public func sendReceivePackages<Result>(
        metadata: GRPCCore.Metadata = [:],
        options: GRPCCore.CallOptions = .defaults,
        requestProducer producer: @Sendable @escaping (GRPCCore.RPCWriter<Claidservice_DataPackage>) async throws -> Void,
        onResponse handleResponse: @Sendable @escaping (GRPCCore.StreamingClientResponse<Claidservice_DataPackage>) async throws -> Result
    ) async throws -> Result where Result: Sendable {
        let request = GRPCCore.StreamingClientRequest<Claidservice_DataPackage>(
            metadata: metadata,
            producer: producer
        )
        return try await self.sendReceivePackages(
            request: request,
            options: options,
            onResponse: handleResponse
        )
    }
}